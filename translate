#!/usr/bin/env python

import sys
import json
import openai
import os
import click
import requests


langs = {
    "unknown": "不明 (与えられる文から推測してください)",
    "ja": "日本語",
    "en": "English",
    "zh": "Chinese",
    "ko": "Korean",
}


class ChatGPT:
    def __init__(self, model_name: str):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model_name = model_name

    def run(
        self, text: str, source_lang: str = "unknown", target_lang: str = "ja"
    ) -> str | None:
        source_lang_description = langs[source_lang]
        target_lang_description = langs[target_lang]
        system_prompt = f"""
自然言語の翻訳をしてください.

翻訳元になる言語: {source_lang_description} ({source_lang.upper()})
翻訳先になる言語: {target_lang_description} ({target_lang.upper()})

ユーザーから文章が与えられます.
文章は
---
から
---
の間にあります.

あなたが返すべき出力は一つの JSON 辞書です.
つまり {{ で始まって }} で終わる文字列のみです.
これ以外のテキストを一切含めないことを厳守してください.
JSON の前後に余計なテキストを出力しないでください.
例えば ```json や ``` といった行は不要です.
このことは厳守してください.

あなたが返すJSONのフォーマットは次です

{{ "detected_source_language": "{{翻訳元の言語, 例えば EN や JA}}", "target_language": "{{ 翻訳先の言語, 例えば JA や EN }}", "model": "{self.model_name}", "text": "{{翻訳結果}}", "pinyin": "{{中国語の場合のみ, 普通話での標準的な拼音}}" }}

"target_language" の値は {target_lang.upper()} になるはずです
"model" は "{self.model_name}" で固定

ではこれから翻訳したい文章を次に与えます.
あなたはその言語の先生になったつもりで, より良い翻訳結果を一つ JSON 形式で示してください.
"""
        messages = [
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": f"""
---
{text}
---
""",
            },
        ]
        result = self.client.chat.completions.create(
            model=self.model_name, messages=messages
        )
        return result.choices[0].message.content


@click.command()
@click.option(
    "--model",
    "-m",
    type=click.Choice(["gpt-4o", "gpt-4o-mini"]),
    default="gpt-4o",
    show_default=True,
)
@click.option("--source", "-s", type=str, default="unknown", help="source language")
@click.option("--target", "-t", type=str, default="ja", help="target language")
@click.argument("text", type=str, required=False)
def main(
    model: str,
    source: str,
    target: str,
    text: str,
):
    if not text:
        text = sys.stdin.read()

    assert source in langs, f"Supported langs: {langs}"
    assert target in langs, f"Supported langs: {langs}"

    result = ChatGPT(model).run(text, source_lang=source, target_lang=target)
    print(result)


if __name__ == "__main__":
    main()
