#!/usr/bin/env python3

import base64
import os
import pathlib
import subprocess
import sys
import time

import click


def to_seconds(time_str: str) -> int:
    if time_str.endswith("d"):
        return int(time_str[:-1]) * 3600 * 24
    elif time_str.endswith("h"):
        return int(time_str[:-1]) * 3600
    elif time_str.endswith("m"):
        return int(time_str[:-1]) * 60
    elif time_str.endswith("s"):
        return int(time_str[:-1])
    else:
        return int(time_str)


class WithCache:
    cachedir: str = "/tmp/withcache"
    ttl: int
    debug: bool

    def __init__(self, ttl: int, debug: bool):
        self.ttl = ttl
        self.debug = debug
        os.makedirs(self.cachedir, exist_ok=True)

    def trace(self, msg: str, fg="red"):
        if self.debug:
            click.secho(msg, err=True, fg=fg)

    def run(self, args: list[str]):
        if not args:
            click.echo("No args", err=True)
            sys.exit(1)

        hashkey = self._hashkey(args)
        hashfile = self._hashfile(hashkey)

        if self.hit(hashfile):
            print(hashfile.read_text())
        else:
            result = subprocess.run(
                args, stdout=subprocess.PIPE, stderr=subprocess.PIPE
            )
            self.trace(f"command = {args}", fg="green")
            self.trace(f"result = {result}", fg="yellow")
            if result.stderr:
                sys.stderr.write(result.stderr.decode("utf-8"))
            with open(hashfile, "w") as f:
                f.write(result.stdout.decode("utf-8"))
            print(result.stdout.decode("utf-8"))

    def _hashkey(self, args: list[str]) -> str:
        key = " ".join(args)
        return base64.b64encode(key.encode("utf-8")).decode("utf-8").replace("/", "_")

    def _hashfile(self, hashkey: str) -> pathlib.Path:
        return pathlib.Path(self.cachedir) / hashkey

    def hit(self, hashfile: pathlib.Path) -> bool:
        if self.ttl == 0:
            self.trace("Cache not hit: ttl is zero.")
            return False
        if os.path.exists(hashfile):
            if self.ttl < 0:
                self.trace("Cache hit: ttl is negative.")
                return True
            file_mtime = os.path.getmtime(hashfile)
            if time.time() - file_mtime <= self.ttl:
                self.trace("Cache hit: cache file is fresh.")
                return True
        self.trace("Cache not hit.")
        return False


@click.command()
@click.option(
    "--ttl",
    "-t",
    default="1h",
    help="Caching time. Number in seconds or use prefix h,m,s",
)
@click.option("--debug", is_flag=True, default=False, help="You dont need this")
@click.argument("args", nargs=-1, type=str)
def main(ttl: str, debug: bool, args: tuple[str, ...]):
    WithCache(to_seconds(ttl), debug).run(list(args))


if __name__ == "__main__":
    main()  # pyright: ignore
