#!/bin/bash

APPID=cc78d27e7519b67719a1121d90e67426

#
# helpers
#

k2c() {
    if [ $# -eq 0 ]; then
        k2c "$(cat)"
    else
        awk "BEGIN { print int(($1 - 273.15) * 10) / 10 }"
    fi
}

unix2locale() {
    if ( date --version >/dev/null 2>&1 ); then
        # GNU
        date --date "@$1" +"%m-%d %H:%M"
    else
        # BSD
        date -r "$1" +"%m-%d %H:%M"
    fi
}

is404() {
    grep '{"cod":"404",' "$1" >/dev/null
}

current() {
    LOC=$1
    TMP=$(mktemp)
    curl -s "http://api.openweathermap.org/data/2.5/weather?q=$LOC&appid=$APPID" >"$TMP"
    if is404 "$TMP"; then
        echo "City not found"
    else
        TEMP=$(jq '.main.temp' "$TMP" | k2c)
        TEMP_MIN=$(jq '.main.temp_min' "$TMP" | k2c)
        TEMP_MAX=$(jq '.main.temp_max' "$TMP" | k2c)
        FORMAT=$(printf "\"\\(.name),\\(.sys.country)
%.1f째C (%.1f째C/%.1f째C)
\\(.main.pressure)hPa
\\(.weather[0].main) (\\(.weather[0].description))\"" "$TEMP" "$TEMP_MIN" "$TEMP_MAX")
        jq -r "$FORMAT" "$TMP"
    fi
    rm "$TMP"
}

current-icon() {
    LOC=$1
    TMP=$(mktemp)
    curl -s "http://api.openweathermap.org/data/2.5/weather?q=$LOC&appid=$APPID" | jq '.weather[0].main' >"$TMP"

    ICONS=(
    light:26A1
    snow:2603
    rain:2602
    cloud:2601
    sun:2600
    clear:2600
    )

    ICON_NUM=fffd
    for kv in "${ICONS[@]}"; do
        key=${kv%:*}
        val=${kv#*:}
        if grep -i "$key" "$TMP" >/dev/null; then
            ICON_NUM=$val
            break
        fi
    done
    echo -e "\u${ICON_NUM}"

    rm "$TMP"
}

forecast() {
    LOC=$1
    TMP=$(mktemp)
    curl -s "http://api.openweathermap.org/data/2.5/forecast?q=$LOC&appid=$APPID" >"$TMP"
    if is404 "$TMP"; then
        echo "City not found"
    else
        jq -r '"\(.city.name),\(.city.country)"' "$TMP"
        export -f k2c
        export -f unix2locale
        jq -r ".list[] | \"echo \$(unix2locale \\(.dt)) \$(k2c \\(.main.temp))째C \\(.weather[0].main)\"" "$TMP" |
        awk 'NR<5 || NR%8==1' | bash |
        sed 's/^20[0-9]*-//g'
    fi
    rm "$TMP"
}

#
# usage
#
usage() {
    cat <<EOD
SYNOPSIS: tenki [-f] <City-name>
OPTIONS:
  -f  forecast
EOD
    exit 0
}

if [ "$1" == "--help" -o "$1" == "-h" ]; then
    usage
fi

#
# argsparse
#
FORECAST=0
ICON=0
LOC=Tokyo
while [ $# -gt 0 ]; do
    case $1 in
        -f )
            FORECAST=1
            shift
            ;;
        --icon | -icon )
            ICON=1
            shift
            ;;
        * )
            LOC=$1
            shift
            ;;
    esac
done

if [ $ICON -eq 1 ]; then
    current-icon "$LOC"
elif [ $FORECAST -eq 0 ]; then
    current "$LOC"
else
    forecast "$LOC"
fi
