#!/usr/bin/env python

import sys
import openai
import os
import click


class ChatGPT:
    def __init__(self):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    def chat(self, language: str, text: str) -> str | None:
        """自然言語で書いてほしいコードを説明する

        生成したコードを得る

        Parameters
        ----------
        language
            プログラミング言語
        text
            説明文
        """
        system_prompt = f"""
プログラミングの手伝いをしてください.
{language} 言語でコーディングをしています.
今からどんなコードを書く必要があるか説明するので, それを実現するコード片を出力してください.

ユーザーは一秒でも早く結果を知りたいので, {language} コードを示す前に御託を述べるような真似は決してしないでください.
そのようなことをする場合, あなたの結果はマイナスに評価されます.
必ず {language} コードのみを出力してください.
コードの前後に ```{language.lower()} や ``` なんかを出力することも本当にやめてください.
"""
        messages = [
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": f"""
---
{text}
---
""",
            },
        ]
        result = self.client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=messages,
        )
        return result.choices[0].message.content

    def complete(
        self, language: str, code: str, placeholder: str = "@CMP", debug: bool = False
    ) -> str | None:
        """与えたプログラムコード片のうちプレースホルダーを補完してもらう

        {{{ から }}} に囲まれた部分は ChatGPT には渡さない.

        生成したコードを得る

        Parameters
        ----------
        language
            プログラミング言語
        placeholder
            プレースホルダーとして使うマーカー
            このマーカーの後ろに丸括弧付きで補足文を書ける
        code
            プレースホルダーを含むプログラムコード片
        """
        import re

        pattern = r"\{\{\{.*?\}\}\}"
        code = re.sub(pattern, "", code, flags=re.DOTALL)

        system_prompt = f"""
プログラミングの手伝いをしてください.

今から {language} 言語で書いたコードを示します.
途中に `{placeholder}` が出現しますが, これはプレースホルダーを表しています.
あなたがすべきことはこのプレースホルダーを全て適切に埋めたコードを出力することです.
このプレースホルダー以外の部分は何も変更せずにそのまま出力するように努めてください.

プレースホルダーの補足:

{placeholder}

はプレースホルダーを表します

{placeholder}(ここに補足文)

は補足文付きのプレースホルダーです.
あなたはこの文章をヒントにしてコードを埋めてください.
例えば

fn main() {{
    {placeholder}(Hello, World! をする)
}}

といった具合です.

無定義で現れる関数やマクロはあなたが見えない場所が定義されている.
あなたがそれらを使うことも許可されている.
とにかく {placeholder} を補完することに集中しろ.

ユーザーは一秒でも早く結果を知りたいので, {language} コードを示す前に御託を述べるような真似は決してするな.
そのようなことをする場合, あなたの結果はマイナスに評価されます.
"""
        messages = [
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": f"""
---
{code}
---
""",
            },
        ]
        if debug:
            click.secho(messages, err=True, fg="green")
        result = self.client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=messages,
        )
        return result.choices[0].message.content


@click.group()
def main():
    pass


@main.command()
@click.option("--language", "-L", type=str, default="Rust")
@click.argument("text", type=str, required=False)
def chat(
    language: str,
    text: str,
):
    if not text:
        text = sys.stdin.read()
    click.secho("Running...", err=True, fg="yellow")
    result = ChatGPT().chat(language, text)
    print(result)


@main.command()
@click.option("--language", "-L", type=str, default="Rust")
@click.option("--debug", is_flag=True, default=False)
@click.argument("src", type=str, required=False)
def complete(
    language: str,
    debug: bool,
    src: str,
):
    if src:
        code = open(src, "rt").read()
    else:
        code = sys.stdin.read()
    click.secho("Running...", err=True, fg="yellow")
    result = ChatGPT().complete(language, code, debug)
    print(result)


if __name__ == "__main__":
    main()
