#!/usr/bin/env python

import os
import sys

import click
import openai
from pydantic import BaseModel


class CodeOutput(BaseModel):
    language: str
    explanation: str
    code: str


class ChatGPT:
    def __init__(self):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    def chat(self, language: str, text: str) -> CodeOutput:
        """自然言語で書いてほしいコードを説明する

        生成したコードを得る

        Parameters
        ----------
        language
            プログラミング言語
        text
            説明文
        """
        system_prompt = f"""
プログラミングの手伝いをしてください.
{language} 言語でコーディングをしています.
今からどんなコードを書く必要があるか説明するので, それを実現するコード片を出力してください.

ユーザーは一秒でも早く結果を知りたいので, {language} コードを示す前に御託を述べるような真似は決してしないでください.
そのようなことをする場合, あなたの結果はマイナスに評価されます.
必ず {language} コードのみを出力してください.
コードの前後に ```{language.lower()} や ``` なんかを出力することも本当にやめてください.
"""
        messages = [
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": f"""
---
{text}
---
""",
            },
        ]
        result = self.client.beta.chat.completions.parse(
            model="gpt-4o",
            messages=messages,  # type: ignore
            response_format=CodeOutput,
        )
        return result.choices[0].message.parsed  # type: ignore

    def complete(self, language: str, code: str) -> CodeOutput:
        """与えたプログラムコード片のうちプレースホルダーを補完してもらう

        {{ ... }} が補完対象
        生成したコードを得る

        Parameters
        ----------
        language
            プログラミング言語
        code
            プレースホルダーを含むプログラムコード片
        """
        system_prompt = f"""
プログラミングの手伝いをしてください

今からプログラミング言語 ({language}) で書いたコードを示します
途中に {{{{ ... }}}} が出現します. これがプレースホルダーを表しています

例えば

fn main() {{
    {{{{ Hello, World! をする }}}}
}}

といった具合です.

あなたがすべきことはこのプレースホルダーの中を埋めることです
プレースホルダーの中には何を書きたいかを自然言語で書かれることがあります
その場合にはそれに従ってください
プレースホルダーの中は空の場合もあります
その場合には周囲のコードから類推してください

全てを適切に埋めたコードを出力してください

無定義で現れる関数やマクロはあなたが見えない場所が定義されている
あなたがそれらを使うことも許可されている
とにかく プレースホルダー {{{{ }}}} を補完することに集中せよ
"""
        messages = [
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": f"""
---
{code}
---
""",
            },
        ]
        result = self.client.beta.chat.completions.parse(
            model="gpt-4o",
            messages=messages,  # type: ignore
            response_format=CodeOutput,
        )
        return result.choices[0].message.parsed  # type: ignore


@click.group()
def main():
    pass


@main.command()
@click.option("--language", "-L", type=str, default="Rust")
@click.option("--quiet", "-q", is_flag=True, default=False)
@click.argument("text", type=str, required=False)
def chat(
    language: str,
    quiet: bool,
    text: str,
):
    if not text:
        text = sys.stdin.read()
    if not quiet:
        click.secho("Running...", err=True, fg="yellow")
    result = ChatGPT().chat(language, text)
    if not quiet:
        click.secho(f"Language: {result.language}", err=True)
        click.secho(f"Explanation: {result.explanation}", err=True)
    print(result.code)


@main.command()
@click.option("--language", "-L", type=str, default="?")
@click.option("--quiet", "-q", is_flag=True, default=False)
@click.argument("src", type=str, required=False)
def complete(
    language: str,
    quiet: bool,
    src: str,
):
    if src:
        code = open(src, "rt").read()
    else:
        code = sys.stdin.read()
    if not quiet:
        click.secho("Running...", err=True, fg="yellow")
    result = ChatGPT().complete(language, code)
    if not quiet:
        click.secho(f"Language: {result.language}", err=True)
        click.secho(f"Explanation: {result.explanation}", err=True)
    print(result.code)


if __name__ == "__main__":
    main()
