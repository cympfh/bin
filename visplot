#!/usr/bin/env python

import json
import time
import re

import click
import numpy
from visdom import Visdom


def follow(f, interval):
    f.seek(0, 2)
    while True:
        line = f.readline()
        if not line:
            time.sleep(interval)
            continue
        yield line


def make_keys(data, key_names):
    keys = []
    all_keys = set()
    for item in data:
        for k in item:
            all_keys.add(k)
    for name in key_names:
        if '*' in name:
            pattern = re.compile(re.sub('\*', '.*', name))
            for k in all_keys:
                if pattern.fullmatch(k):
                    keys.append(k)
        elif name in all_keys:
            keys.append(name)
        else:
            raise Exception('Unknown key: {}'.format(name))
    return keys


def get(item, key, index=0):
    if key == 'index':
        return index
    return item[key]


@click.command()
@click.option('-x', default='index', help='x-axis key; `index` is a special key')
@click.option('-y', required=True, help='y-axis keys; multiple keys can be specified by comma-split')
@click.option('--title')
@click.option('--x-label')
@click.option('--y-label')
@click.option('--smoothing', default=0, type=int, help='Simple Moving Average with recent N items')
@click.option('--interval', '-i', default=-1, type=int,
              help='plot auto-refresh interval (sec); When this is negative, refresh is disabled (default=-1)')
@click.argument('logpath')
def main(x, y, title, x_label, y_label, smoothing, interval, logpath):

    data = [json.loads(line) for line in open(logpath)]
    title = title if title else logpath

    x_key = x
    y_keys = make_keys(data, y.split(','))

    Y = numpy.array([[get(item, key, i) for key in y_keys] for i, item in enumerate(data)])
    X = numpy.array([[get(item, x_key, i) for key in y_keys] for i, item in enumerate(data)])

    if smoothing > 0:
        last_Y = Y[-smoothing:, :]
        smoothed_Y = Y + 0.0
        for i in range(min(smoothing, len(Y))):
            smoothed_Y[i] = numpy.mean(Y[:i + 1, :], axis=0)
        for i in range(smoothing, len(Y)):
            smoothed_Y[i] = numpy.mean(Y[i - smoothing + 1: i + 1, :], axis=0)
        Y = smoothed_Y

    plot = Visdom()
    opts = {'legend': y_keys}
    if title:
        opts['title'] = title
    if x_label:
        opts['xlabel'] = x_label
    if y_label:
        opts['ylabel'] = y_label
    win = plot.line(Y, X, opts=opts)

    if interval <= 0:
        return

    N = len(data)
    with open(logpath, 'r') as f:
        for line in follow(f, interval):
            N += 1
            data = json.loads(line)
            X = numpy.array([[get(data, x_key, N) for key in y_keys]])
            Y = numpy.array([[get(data, key, N) for key in y_keys]])
            if smoothing > 0:
                last_Y = numpy.vstack((last_Y, Y))[-smoothing:, :]
                Y = numpy.mean(last_Y, axis=0).reshape((1, -1))
            plot.line(Y, X, win=win, update='append')
            print('append', data)


if __name__ == '__main__':
    main()
