#!/usr/bin/env python

import os
import re

import click
import easy_scraper
import openai
import requests


class TUI:
    @staticmethod
    def get_input(prompt: str) -> str | None:
        header = f"% {prompt}"
        buffer: str = click.edit(f"{header}\n\n")  # type: ignore
        if not buffer:
            return None
        lines = buffer.split("\n")
        if lines[0] == header:
            lines = lines[1:]
        return " ".join(line for line in lines if line).strip()

    @staticmethod
    def hr():
        click.secho("---", fg="yellow")

    @staticmethod
    def write(label: str, text: str, labelcolor: str, hr: bool = True):
        click.secho(f"[{label}] ", nl=False, fg=labelcolor)
        click.echo(text)
        if hr:
            TUI.hr()


class ChatGPT:
    SYSTEM_PROMPT = """
ユーザーと一緒に論文を読み進めていき あなたは内容を的確に要約したものを出力する
要約は簡潔に箇条書きに日本語で.
ただし登場する術語 (technical term) は無理に和訳せず そのまま英語のまま使ってよい
"""

    def __init__(self, model_name: str, title: str, abst: str):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model_name = model_name
        self.messages = [
            {"role": "system", "content": self.SYSTEM_PROMPT},
            {
                "role": "user",
                "content": f"""
今から "{title}" というタイトルの論文を読む
論文の概要を以下に示す
まず論文の全体像を把握して要約してください

---
{abst}
---
""",
            },
        ]
        result = self.client.chat.completions.create(
            model="gpt-4o",
            messages=self.messages,  # type: ignore
        )
        self.abst = result.choices[0].message.content
        self.messages = [
            {"role": "system", "content": self.SYSTEM_PROMPT},
            {
                "role": "user",
                "content": f"""
今から "{title}" というタイトルの論文を読みます
この論文の概要を次に示すので参考にしてください

---
{self.abst}
---

次に私は論文の断片をコピペするので あなたはその内容を簡潔に要約して出力してください
""",
            },
        ]

    def summarize(self, text: str) -> str | None:
        self.messages.append(
            {
                "role": "user",
                "content": f"""
論文の断片:
---
{text}
---
""",
            }
        )
        result = self.client.chat.completions.create(
            model=self.model_name,
            messages=self.messages,  # type: ignore
        )
        self.messages.pop()
        return result.choices[0].message.content


class Arxiv:
    def __init__(self, code_or_url: str):
        if p := re.search(r"[0-9]+\.[0-9]+", code_or_url):
            self.code = p[0]
        else:
            raise Exception("arxiv code invalid")

    def info(self) -> tuple[str, str]:
        """(title, description)"""
        url = f"https://arxiv.org/abs/{self.code}"
        html = requests.get(url).text
        title = easy_scraper.match(
            html, '<meta property="og:title" content="{title}" />'
        )[0]["title"]
        description = easy_scraper.match(
            html, '<meta property="og:description" content="{description}" />'
        )[0]["description"]
        return title, description


@click.command()
@click.option("--arxiv", type=str, default="")
@click.option(
    "--model",
    "-m",
    type=click.Choice(["gpt-5", "gpt-5-mini", "gpt-5-nano", "gpt-4o", "gpt-4o-mini"]),
    default="gpt-5-nano",
    show_default=True,
)
def main(arxiv: str, model: str):
    if arxiv:
        title, abst = Arxiv(arxiv).info()
    else:
        title = TUI.get_input("Title")
        if not title:
            return
        abst = TUI.get_input("Abstract")
        if not abst:
            return

    TUI.write("TITLE", title, "green", hr=False)
    gpt = ChatGPT(model, title, abst)
    if gpt.abst:
        TUI.write("ABST", gpt.abst, "blue", hr=True)

    while click.confirm("next?", default=None):
        text = TUI.get_input("Text")
        if not text:
            break
        TUI.write("TEXT", text, "green", hr=False)

        summary = gpt.summarize(text)
        if not summary:
            summary = "{Error: ChatGPT response is empty}"
        TUI.write("SUMMARY", summary, "blue", hr=True)


if __name__ == "__main__":
    main()
