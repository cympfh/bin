#!/usr/bin/env python

import os

import click
import openai
from pydantic import BaseModel


class CodeOutput(BaseModel):
    description: str
    tags: list[str]


class ChatGPT:
    def __init__(self, model):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model = model

    def chat(self, text: str) -> CodeOutput:
        """Text-to-Danbooru

        Parameters
        ----------
        text
            説明文
        """
        system_prompt = """
次の日本語を Danbooru 語に変換してください.

翻訳は自然さや効率性よりも忠実性が求められます.

Danbooru 語では何もより画像の情報を正確に表現することが求められます.
意味が部分的に重複したタグをあえて重ねて使用することで, 意味の正確性を担保します.
たとえば 1girl と solo というタグは包含関係にありますが, 敢えて両方のタグを付与することで「イラストにはただ一人がいて、その子が女の子である」という情報を正確に表現します.

まとめると
- すべての情報を正確に表現することが最優先
- 意味の重なったタグを重ねる
- シンプルやコンパクトはかえって悪い
"""
        messages = [
            {
                "role": "system",
                "content": system_prompt,
            },
            {
                "role": "user",
                "content": f"""
---
{text}
---
""",
            },
        ]
        result = self.client.beta.chat.completions.parse(
            model=self.model,
            messages=messages,  # type: ignore
            response_format=CodeOutput,
        )
        return result.choices[0].message.parsed  # type: ignore


@click.command()
@click.option("--model", "-m", type=str, default="gpt-4o")
@click.argument("text", type=str, required=False)
def main(
    model: str,
    text: str,
):
    result = ChatGPT(model).chat(text)
    print(result.description)
    print("---")
    print(" ".join(result.tags))


if __name__ == "__main__":
    main()
