#!/usr/bin/env python

"""pixiv

Requirements:
    pip install pixivpy3 click
    export $PIXIV_ACCESSTOKEN, $PIXIV_REFRESHTOKEN
    To get them, use ~/bin/pixiv-auth
    or see https://gist.github.com/ZipFile/c9ebedb224406f4f11845ab700124362
"""

import json
import logging
import os
import os.path

import click
import pixivpy3

logging.basicConfig(level="INFO", format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("pixiv-app")


class Pixiv:
    def __init__(self):
        api = pixivpy3.AppPixivAPI()
        api.set_auth(
            os.environ.get("PIXIV_ACCESSTOKEN"), os.environ.get("PIXIV_REFRESHTOKEN")
        )
        self.api = api

    def detail(self, illust_id: int) -> dict:
        return self.api.illust_detail(illust_id)

    def download(self, url: str, output_dir: str):
        self.api.download(url, output_dir)


@click.group()
def main():
    pass


@main.command()
@click.argument("illust_id", type=int)
def detail(illust_id: int):
    pixiv = Pixiv()
    detail = pixiv.detail(illust_id)
    print(json.dumps(detail))


@main.command()
@click.option("--output-dir", "-O", type=str, default=os.path.curdir)
@click.argument("illust_id", type=int)
def download(output_dir: str, illust_id: int):
    if not output_dir.endswith("/"):
        output_dir += "/"
    logger.info("Downloading %s to %s", illust_id, output_dir)
    pixiv = Pixiv()
    pages = pixiv.detail(illust_id).get("illust", {}).get("meta_pages", [])
    for page in pages:
        url = page.get("image_urls").get("original")
        basename = url.split("/")[-1]
        output = output_dir + basename
        logger.info("Downloading %s => %s", url, output)
        pixiv.download(url, output_dir)
        print(output)


if __name__ == "__main__":
    main()
