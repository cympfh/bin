#!/usr/bin/env python

import sys
import subprocess
import tempfile

import click
import numpy
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA


def shorten(label):
    m = 20
    if len(label) > m:
        label = label[:m//2] + '..' + label[-m//2:]
    return label


def gnuplot_template(dim):
    if dim == 2:
        plot_line = 'plot \"{}\" using 1:2:3 with labels notitle boxed center font ",16"'
    else:
        plot_line = 'splot \"{}\" using 1:2:3:4 with labels notitle boxed center font ",15"'

    return """
set terminal qt
set grid
set datafile separator "\t"
set style textbox opaque
{}
pause mouse close
""".format(plot_line)


def load(d1, d2, short):
    labels = []
    X = []
    for line in sys.stdin:
        line = line.strip()
        if line[0] == '#':
            continue
        fs = line.split(d1)
        label = fs[0]
        if short:
            label = shorten(label)
        rest = d1.join(fs[1:])
        vect = [float(x) for x in rest.split(d2)]
        labels.append(label)
        X.append(vect)
    X = numpy.array(X).astype(numpy.float32)
    return labels, X


def normalize(X):
    import numpy.linalg
    for i in range(len(X)):
        X[i] /= numpy.linalg.norm(X[i])
    return X


def tsne(X, dim=2):
    numpy.set_printoptions(suppress=True)
    X = TSNE(n_components=dim).fit_transform(X)
    return X


def pca(X, dim=2):
    numpy.set_printoptions(suppress=True)
    X = PCA(n_components=dim, whiten=True).fit_transform(X)
    return X


@click.command()
@click.option('-d', default='\t', help='deliminator between the label and its vector')
@click.option('-c', default=' ', help='deliminator for the vector')
@click.option('--dim', default=2, type=click.IntRange(2, 3))
@click.option('--method', default='tsne', type=click.Choice(['tsne', 'pca']))
@click.option('--norm/--no-norm', default=False,
              help='normalize each vectors (this can compute cos instead of L2)')
@click.option('--output', '-o', help='When no --output is specified, run gnuplot/Qt directly')
@click.option('--short/--no-short', default=False, help='shoten long labels')
def main(d, c, dim, method, norm, output, short):

    labels, X = load(d, c, short)

    if norm:
        X = normalize(X)

    if method == 'tsne':
        X = tsne(X, dim)
    elif method == 'pca':
        X = pca(X, dim)
    else:
        raise

    if output is None:
        dat = tempfile.NamedTemporaryFile(mode='w')
    else:
        dat = open(output, 'w')

    for i in range(len(X)):
        vec = '\t'.join(str(x) for x in X[i].tolist())
        dat.write("{}\t\"{}\"\n".format(vec, labels[i]))
    dat.flush()

    if output is None:
        gp = tempfile.NamedTemporaryFile(mode='w')
        gp.write(gnuplot_template(dim).format(dat.name))
        gp.flush()
        result = subprocess.call(['gnuplot', gp.name, '-p'])
        if result != 0:
            click.secho('gnuplot returns not 0', fg='red', err=True)
        gp.close()

    dat.close()


if __name__ == '__main__':
    main()
