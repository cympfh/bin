#!/usr/bin/env ruby

require 'time'

def usage
  STDERR.puts <<-HELP
NAME
    atq -- easy crontab

SYNOPSIS
    atq [options] <time> <command [args]>

    <time> written to be parsed as Time in Ruby
    <command [args]> will run at the time
    atq is running until <command> at foregrand

OPTIONS
    -v, --verbose

EXAMPLE
    atq 23:36 date
        `date` will be run at 23:36 (located time) today.
    atq 3/29/23:36 date
        This specifies 03-29 23:36 (located time and day) this year.
    atq 2017/3/30/23:36 date
        This specifies also year.

    When time parsing successed, specified time is output in STDERR.
HELP
  exit 0
end

usage if ARGV[0] == '-h' || ARGV[0] == '--help'

verbose = false
time = nil
command = nil

while ARGV.size > 0
  case ARGV[0]
  when '-v', '--verbose'
    verbose = true
    ARGV.shift
  else
    if time
      command = ARGV[0..-1].join ' '
      ARGV.clear
    else
      # time parse
      if /^\d{10,10}$/ =~ ARGV[0]
          time = ARGV[0].to_i
      else
          time = Time.parse(ARGV[0] + "+09:00").to_i
      end
      ARGV.shift
    end
  end
end

if verbose
  puts "schedule at #{Time.at time}: #{command}"
end

if time < Time.now.to_i
  puts "#{Time.at time} is past"
  exit 1
end

def iter(time, command)
  now = Time.now.to_i

  if now >= time
    puts `#{command}`
    exit 0
  else
    w = [0.01, 0.95 * (time - now)].max
    sleep w
    iter time, command
  end
end

iter time, command
