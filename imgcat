#!/usr/bin/env ruby

require 'optparse'

colors = [
  [0, 0, 0],
  [128, 0, 0],
  [0, 128, 0],
  [128, 128, 0],
  [0, 0, 128],
  [128, 0, 128],
  [0, 128, 128],
  [192, 192, 192],
  [128, 128, 128],
  [255, 0, 0],
  [0, 255, 0],
  [255, 255, 0],
  [0, 0, 255],
  [255, 0, 255],
  [0, 255, 255],
  [255, 255, 255],
  [0, 0, 0],
  [0, 0, 95],
  [0, 0, 135],
  [0, 0, 175],
  [0, 0, 215],
  [0, 0, 255],
  [0, 95, 0],
  [0, 95, 95],
  [0, 95, 135],
  [0, 95, 175],
  [0, 95, 215],
  [0, 95, 255],
  [0, 135, 0],
  [0, 135, 95],
  [0, 135, 135],
  [0, 135, 175],
  [0, 135, 215],
  [0, 135, 255],
  [0, 175, 0],
  [0, 175, 95],
  [0, 175, 135],
  [0, 175, 175],
  [0, 175, 215],
  [0, 175, 255],
  [0, 215, 0],
  [0, 215, 95],
  [0, 215, 135],
  [0, 215, 175],
  [0, 215, 215],
  [0, 215, 255],
  [0, 255, 0],
  [0, 255, 95],
  [0, 255, 135],
  [0, 255, 175],
  [0, 255, 215],
  [0, 255, 255],
  [95, 0, 0],
  [95, 0, 95],
  [95, 0, 135],
  [95, 0, 175],
  [95, 0, 215],
  [95, 0, 255],
  [95, 95, 0],
  [95, 95, 95],
  [95, 95, 135],
  [95, 95, 175],
  [95, 95, 215],
  [95, 95, 255],
  [95, 135, 0],
  [95, 135, 95],
  [95, 135, 135],
  [95, 135, 175],
  [95, 135, 215],
  [95, 135, 255],
  [95, 175, 0],
  [95, 175, 95],
  [95, 175, 135],
  [95, 175, 175],
  [95, 175, 215],
  [95, 175, 255],
  [95, 215, 0],
  [95, 215, 95],
  [95, 215, 135],
  [95, 215, 175],
  [95, 215, 215],
  [95, 215, 255],
  [95, 255, 0],
  [95, 255, 95],
  [95, 255, 135],
  [95, 255, 175],
  [95, 255, 215],
  [95, 255, 255],
  [135, 0, 0],
  [135, 0, 95],
  [135, 0, 135],
  [135, 0, 175],
  [135, 0, 215],
  [135, 0, 255],
  [135, 95, 0],
  [135, 95, 95],
  [135, 95, 135],
  [135, 95, 175],
  [135, 95, 215],
  [135, 95, 255],
  [135, 135, 0],
  [135, 135, 95],
  [135, 135, 135],
  [135, 135, 175],
  [135, 135, 215],
  [135, 135, 255],
  [135, 175, 0],
  [135, 175, 95],
  [135, 175, 135],
  [135, 175, 175],
  [135, 175, 215],
  [135, 175, 255],
  [135, 215, 0],
  [135, 215, 95],
  [135, 215, 135],
  [135, 215, 175],
  [135, 215, 215],
  [135, 215, 255],
  [135, 255, 0],
  [135, 255, 95],
  [135, 255, 135],
  [135, 255, 175],
  [135, 255, 215],
  [135, 255, 255],
  [175, 0, 0],
  [175, 0, 95],
  [175, 0, 135],
  [175, 0, 175],
  [175, 0, 215],
  [175, 0, 255],
  [175, 95, 0],
  [175, 95, 95],
  [175, 95, 135],
  [175, 95, 175],
  [175, 95, 215],
  [175, 95, 255],
  [175, 135, 0],
  [175, 135, 95],
  [175, 135, 135],
  [175, 135, 175],
  [175, 135, 215],
  [175, 135, 255],
  [175, 175, 0],
  [175, 175, 95],
  [175, 175, 135],
  [175, 175, 175],
  [175, 175, 215],
  [175, 175, 255],
  [175, 215, 0],
  [175, 215, 95],
  [175, 215, 135],
  [175, 215, 175],
  [175, 215, 215],
  [175, 215, 255],
  [175, 255, 0],
  [175, 255, 95],
  [175, 255, 135],
  [175, 255, 175],
  [175, 255, 215],
  [175, 255, 255],
  [215, 0, 0],
  [215, 0, 95],
  [215, 0, 135],
  [215, 0, 175],
  [215, 0, 215],
  [215, 0, 255],
  [215, 95, 0],
  [215, 95, 95],
  [215, 95, 135],
  [215, 95, 175],
  [215, 95, 215],
  [215, 95, 255],
  [215, 135, 0],
  [215, 135, 95],
  [215, 135, 135],
  [215, 135, 175],
  [215, 135, 215],
  [215, 135, 255],
  [215, 175, 0],
  [215, 175, 95],
  [215, 175, 135],
  [215, 175, 175],
  [215, 175, 215],
  [215, 175, 255],
  [215, 215, 0],
  [215, 215, 95],
  [215, 215, 135],
  [215, 215, 175],
  [215, 215, 215],
  [215, 215, 255],
  [215, 255, 0],
  [215, 255, 95],
  [215, 255, 135],
  [215, 255, 175],
  [215, 255, 215],
  [215, 255, 255],
  [255, 0, 0],
  [255, 0, 95],
  [255, 0, 135],
  [255, 0, 175],
  [255, 0, 215],
  [255, 0, 255],
  [255, 95, 0],
  [255, 95, 95],
  [255, 95, 135],
  [255, 95, 175],
  [255, 95, 215],
  [255, 95, 255],
  [255, 135, 0],
  [255, 135, 95],
  [255, 135, 135],
  [255, 135, 175],
  [255, 135, 215],
  [255, 135, 255],
  [255, 175, 0],
  [255, 175, 95],
  [255, 175, 135],
  [255, 175, 175],
  [255, 175, 215],
  [255, 175, 255],
  [255, 215, 0],
  [255, 215, 95],
  [255, 215, 135],
  [255, 215, 175],
  [255, 215, 215],
  [255, 215, 255],
  [255, 255, 0],
  [255, 255, 95],
  [255, 255, 135],
  [255, 255, 175],
  [255, 255, 215],
  [255, 255, 255],
  [8, 8, 8],
  [18, 18, 18],
  [28, 28, 28],
  [38, 38, 38],
  [48, 48, 48],
  [58, 58, 58],
  [68, 68, 68],
  [78, 78, 78],
  [88, 88, 88],
  [96, 96, 96],
  [102, 102, 102],
  [118, 118, 118],
  [128, 128, 128],
  [138, 138, 138],
  [148, 148, 148],
  [158, 158, 158],
  [168, 168, 168],
  [178, 178, 178],
  [188, 188, 188],
  [198, 198, 198],
  [208, 208, 208],
  [218, 218, 218],
  [228, 228, 228],
  [238, 238, 238]
]
colors.size.times { |i| colors[i] = colors[i].map { |x| x.to_f / 255.0 } }

def gray_char(x)
  chars = ['@', '#', 'e', '+', '/', '-', '.', ' ']
  i = (x * chars.size).floor
  chars[i]
end

def distance(pixel1, pixel2)
  a, b, c = pixel1
  d, e, f = pixel2
  (a - d).abs + (b - e).abs + (c - f).abs
end

def color_code(pixel, colors)
  mn_d = 100
  mn_idx = 0
  colors.each_with_index do |sample, idx|
    d = distance(pixel, sample)
    if mn_d > d
      mn_d = d
      mn_idx = idx
    end
  end
  format('%03d', mn_idx)
end

def make_ppm(path, options)
  out = '/tmp/tmp.ppm'
  `convert -geometry #{options[:geometry]} -compress none #{path} #{out}`
  out
end

def read_ppm(path)
  w = -1
  h = -1
  buf = []
  colorscheme = -1

  head = true
  File.open(path).readlines.each do |line|
    line = line.chomp
    next if line[0] == '#' || line == ''
    if head
      head = false
    elsif w == -1
      w, h = line.split.map(&:to_i)
    elsif colorscheme < 1
      colorscheme = line.to_f
    else
      buf += line.split.map(&:to_f).map { |x| x / colorscheme }
    end
  end

  bitmap = []

  k = buf.size / 3
  k.times do |i|
    bitmap << buf[i * 3...i * 3 + 3]
  end
  buf = buf[k * 3..-1]

  [w, h, bitmap]
end

def cat(path, options)
  ppm = make_ppm(path, options)
  w, h, bitmap = read_ppm(ppm)
  gray_bitmap = bitmap.map { |r, g, b| r + g + b }
  gray_max = gray_bitmap.max + 0.0001

  colors = options[:colors]

  (0...h).step(2).each do |i|
    (0...w).each do |j|
      idx = i * w + j
      if options[:color]
        code = color_code(bitmap[idx], colors)
        print "\e[48;5;#{code};38;5;#{code}m " if options[:color]
      else
        print gray_char(gray_bitmap[idx] / gray_max)
      end
    end
    print "\e[0m" if options[:color]
    puts ''
  end
end

options = { geometry: '80x80', color: false, colors: colors }
OptionParser.new do |opts|
  opts.on('-g [WxH]', '--geometry', '80x80 by default') do |v|
    options[:geometry] = v
  end
  opts.on('-C', '--color', 'monochrome by default') do |_|
    options[:color] = true
  end
end.parse!

ARGV.each do |path|
  cat path, options
end
